Submodule Loop contains modified content
diff --git a/Loop/Loop/Managers/LoopDataManager.swift b/Loop/Loop/Managers/LoopDataManager.swift
index ffc66ee3..2d2f1ded 100644
--- a/Loop/Loop/Managers/LoopDataManager.swift
+++ b/Loop/Loop/Managers/LoopDataManager.swift
@@ -67,6 +67,21 @@ final class LoopDataManager {
 
     private var insulinOnBoard: InsulinValue?
 
+    // Calculate the effectiveBolusApplicationFactor
+    private func calculateEffectiveBolusApplicationFactor(glucose: HKQuantity, correctionRangeSchedule: GlucoseRangeSchedule, settings: LoopSettings) -> Double {
+        // Calculate current glucose and lower bound target
+        let currentGlucose = glucose.doubleValue(for: .milligramsPerDeciliter)
+        let correctionRange = correctionRangeSchedule.quantityRange(at: now())
+        let lowerBoundTarget = correctionRange.lowerBound.doubleValue(for: .milligramsPerDeciliter)
+        // Calculate minimum glucose sliding scale and scaling fraction
+        let minGlucoseSlidingScale = LoopConstants.minGlucoseDeltaSlidingScale + lowerBoundTarget
+        let scalingFraction = (LoopConstants.maxPartialApplicationFactor-LoopConstants.minPartialApplicationFactor) / (LoopConstants.maxGlucoseSlidingScale - minGlucoseSlidingScale)
+        let scalingGlucose = max(currentGlucose - minGlucoseSlidingScale, 0.0)
+        // Calculate effectiveBolusApplicationFactor
+        let effectiveBolusApplicationFactor = min(LoopConstants.minPartialApplicationFactor + scalingGlucose * scalingFraction, LoopConstants.maxPartialApplicationFactor)
+        return effectiveBolusApplicationFactor
+    }
+
     deinit {
         for observer in notificationObservers {
             NotificationCenter.default.removeObserver(observer)
@@ -1698,7 +1713,18 @@ extension LoopDataManager {
                     return self.delegate?.roundBolusVolume(units: units) ?? units
                 }
 
-                let maxAutomaticBolus = min(iobHeadroom, maxBolus! * LoopConstants.bolusPartialApplicationFactor)
+                var effectiveBolusApplicationFactor = LoopConstants.bolusPartialApplicationFactor
+
+                let flagSlidingScale = settings.applyLinearRampToBolusApplicationFactor
+
+                if flagSlidingScale {
+                    let correctionRangeSchedule = settings.effectiveGlucoseTargetRangeSchedule()
+                    effectiveBolusApplicationFactor = calculateEffectiveBolusApplicationFactor(glucose: glucose.quantity, correctionRangeSchedule: correctionRangeSchedule!, settings: settings)
+                }
+                print(" *** Glucose, effectiveBolusApplicationFactor: ", glucose.quantity, Double(Int(100.0*effectiveBolusApplicationFactor))/100.0)
+
+                // If a user customizes maxPartialApplicationFactor > 1; this respects maxBolus
+                let maxAutomaticBolus = min(iobHeadroom, maxBolus! * min(effectiveBolusApplicationFactor, 1.0))
 
                 dosingRecommendation = predictedGlucose.recommendedAutomaticDose(
                     to: glucoseTargetRange!,
@@ -1708,7 +1734,7 @@ extension LoopDataManager {
                     model: doseStore.insulinModelProvider.model(for: pumpInsulinType),
                     basalRates: basalRateSchedule!,
                     maxAutomaticBolus: maxAutomaticBolus,
-                    partialApplicationFactor: LoopConstants.bolusPartialApplicationFactor * self.timeBasedDoseApplicationFactor,
+                    partialApplicationFactor: effectiveBolusApplicationFactor * self.timeBasedDoseApplicationFactor,
                     lastTempBasal: lastTempBasal,
                     volumeRounder: volumeRounder,
                     rateRounder: rateRounder,
diff --git a/Loop/Loop/Managers/SettingsManager.swift b/Loop/Loop/Managers/SettingsManager.swift
index e52cada0..ded3e7fc 100644
--- a/Loop/Loop/Managers/SettingsManager.swift
+++ b/Loop/Loop/Managers/SettingsManager.swift
@@ -109,6 +109,7 @@ class SettingsManager {
                 maximumBolus: latestSettings.maximumBolus,
                 suspendThreshold: latestSettings.suspendThreshold,
                 automaticDosingStrategy: latestSettings.automaticDosingStrategy,
+                applyLinearRampToBolusApplicationFactor: latestSettings.applyLinearRampToBolusApplicationFactor,
                 defaultRapidActingModel: latestSettings.defaultRapidActingModel?.presetForRapidActingInsulin)
         }
     }
@@ -140,7 +141,8 @@ class SettingsManager {
                               cgmDevice: deviceStatusProvider?.cgmManagerStatus?.device,
                               pumpDevice: deviceStatusProvider?.pumpManagerStatus?.device,
                               bloodGlucoseUnit: displayGlucoseUnitObservable?.displayGlucoseUnit,
-                              automaticDosingStrategy: newLoopSettings.automaticDosingStrategy)
+                              automaticDosingStrategy: newLoopSettings.automaticDosingStrategy,
+                              applyLinearRampToBolusApplicationFactor: newLoopSettings.applyLinearRampToBolusApplicationFactor)
     }
 
     func storeSettings(newLoopSettings: LoopSettings? = nil, notificationSettings: NotificationSettings? = nil) {
diff --git a/Loop/Loop/Models/LoopConstants.swift b/Loop/Loop/Models/LoopConstants.swift
index a62fc138..2dc64f18 100644
--- a/Loop/Loop/Models/LoopConstants.swift
+++ b/Loop/Loop/Models/LoopConstants.swift
@@ -75,4 +75,12 @@ enum LoopConstants {
     static let simpleBolusCalculatorMinGlucoseBolusRecommendation = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: 70)
     static let simpleBolusCalculatorMinGlucoseMealBolusRecommendation = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: 55)
     static let simpleBolusCalculatorGlucoseWarningLimit = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: 70)
+
+    // Dosing Stategy: Automatic Bolus: Sliding Scale
+    static let minPartialApplicationFactor = 0.20 // min fraction of correction when glucose > minGlucoseSlidingScale
+    static let maxPartialApplicationFactor = 0.80 // max fraction of correction when glucose > maxGlucoseSlidingScale
+    // set minGlucoseSlidingScale based on user setting for correction range
+    // use mg/dL for calculations
+    static let minGlucoseDeltaSlidingScale = 10.0 // mg/dL
+    static let maxGlucoseSlidingScale = 200.0 // mg/dL
 }
diff --git a/Loop/Loop/View Controllers/StatusTableViewController.swift b/Loop/Loop/View Controllers/StatusTableViewController.swift
index da707249..e3b4e146 100644
--- a/Loop/Loop/View Controllers/StatusTableViewController.swift	
+++ b/Loop/Loop/View Controllers/StatusTableViewController.swift	
@@ -1547,6 +1547,7 @@ final class StatusTableViewController: LoopChartsTableViewController {
                                           initialDosingEnabled: deviceManager.loopManager.settings.dosingEnabled,
                                           isClosedLoopAllowed: automaticDosingStatus.$isAutomaticDosingAllowed,
                                           automaticDosingStrategy: deviceManager.loopManager.settings.automaticDosingStrategy,
+                                          applyLinearRampToBolusApplicationFactor: deviceManager.loopManager.settings.applyLinearRampToBolusApplicationFactor,
                                           availableSupports: supportManager.availableSupports,
                                           isOnboardingComplete: onboardingManager.isComplete,
                                           therapySettingsViewModelDelegate: deviceManager,
@@ -2145,6 +2146,12 @@ extension StatusTableViewController: SettingsViewModelDelegate {
         }
     }
 
+    func applyLinearRampToBolusApplicationFactorChanged(_ value: Bool) {
+        self.deviceManager.loopManager.mutateSettings { settings in
+            settings.applyLinearRampToBolusApplicationFactor = value
+        }
+    }
+
     func didTapIssueReport() {
         // TODO: this dismiss here is temporary, until we know exactly where
         // we want this screen to belong in the navigation flow
diff --git a/Loop/Loop/View Models/SettingsViewModel.swift b/Loop/Loop/View Models/SettingsViewModel.swift
index 3e3c20be..13ff5556 100644
--- a/Loop/Loop/View Models/SettingsViewModel.swift	
+++ b/Loop/Loop/View Models/SettingsViewModel.swift	
@@ -52,6 +52,7 @@ public typealias PumpManagerViewModel = DeviceViewModel<PumpManagerDescriptor>
 public protocol SettingsViewModelDelegate: AnyObject {
     func dosingEnabledChanged(_: Bool)
     func dosingStrategyChanged(_: AutomaticDosingStrategy)
+    func applyLinearRampToBolusApplicationFactorChanged(_: Bool)
     func didTapIssueReport()
     var closedLoopDescriptiveText: String? { get }
 }
@@ -93,6 +94,12 @@ public class SettingsViewModel: ObservableObject {
         }
     }
 
+    @Published var applyLinearRampToBolusApplicationFactor: Bool {
+        didSet {
+            delegate?.applyLinearRampToBolusApplicationFactorChanged(applyLinearRampToBolusApplicationFactor)
+        }
+    }
+
     var closedLoopPreference: Bool {
        didSet {
            delegate?.dosingEnabledChanged(closedLoopPreference)
@@ -113,6 +120,7 @@ public class SettingsViewModel: ObservableObject {
                 initialDosingEnabled: Bool,
                 isClosedLoopAllowed: Published<Bool>.Publisher,
                 automaticDosingStrategy: AutomaticDosingStrategy,
+                applyLinearRampToBolusApplicationFactor: Bool,
                 availableSupports: [SupportUI],
                 isOnboardingComplete: Bool,
                 therapySettingsViewModelDelegate: TherapySettingsViewModelDelegate?,
@@ -130,6 +138,7 @@ public class SettingsViewModel: ObservableObject {
         self.closedLoopPreference = initialDosingEnabled
         self.isClosedLoopAllowed = false
         self.automaticDosingStrategy = automaticDosingStrategy
+        self.applyLinearRampToBolusApplicationFactor = applyLinearRampToBolusApplicationFactor
         self.availableSupports = availableSupports
         self.isOnboardingComplete = isOnboardingComplete
         self.therapySettingsViewModelDelegate = therapySettingsViewModelDelegate
@@ -178,6 +187,7 @@ extension SettingsViewModel {
                                  initialDosingEnabled: true,
                                  isClosedLoopAllowed: FakeClosedLoopAllowedPublisher().$mockIsClosedLoopAllowed,
                                  automaticDosingStrategy: .automaticBolus,
+                                 applyLinearRampToBolusApplicationFactor: false,
                                  availableSupports: [],
                                  isOnboardingComplete: false,
                                  therapySettingsViewModelDelegate: nil,
diff --git a/Loop/Loop/Views/DosingStrategySelectionView.swift b/Loop/Loop/Views/DosingStrategySelectionView.swift
index f447b032..5846654a 100644
--- a/Loop/Loop/Views/DosingStrategySelectionView.swift
+++ b/Loop/Loop/Views/DosingStrategySelectionView.swift
@@ -14,11 +14,13 @@ import LoopKitUI
 public struct DosingStrategySelectionView: View {
     
     @Binding private var automaticDosingStrategy: AutomaticDosingStrategy
-    
+    @Binding private var applyLinearRampToBolusApplicationFactor: Bool
+
     @State private var internalDosingStrategy: AutomaticDosingStrategy
     
-    public init(automaticDosingStrategy: Binding<AutomaticDosingStrategy>) {
+    public init(automaticDosingStrategy: Binding<AutomaticDosingStrategy>, applyLinearRampToBolusApplicationFactor: Binding<Bool>) {
         self._automaticDosingStrategy = automaticDosingStrategy
+        self._applyLinearRampToBolusApplicationFactor = applyLinearRampToBolusApplicationFactor
         self._internalDosingStrategy = State(initialValue: automaticDosingStrategy.wrappedValue)
     }
     
@@ -45,27 +47,51 @@ public struct DosingStrategySelectionView: View {
                             self.internalDosingStrategy = strategy // Hack to force update. :(
                         }
                     }
-                )
+                ),
+                trailingView: strategy.isAutomaticBolus ? linearRampVolusApplicationFactorSection : nil
             )
             .padding(.vertical, 4)
         }
     }
 }
 
+extension DosingStrategySelectionView {
+    var linearRampVolusApplicationFactorSection: AnyView {
+        return AnyView(
+            Toggle(isOn: $applyLinearRampToBolusApplicationFactor) {
+                VStack(alignment: .leading) {
+                    Text("Modify Bolus Percentage", comment: "The title text for the Modify Bolus Percentage toggle")
+                        .padding(.vertical, 0.5)
+                    Text("Modify Automatic Bolus behavior: The percentage of recommended bolus delivered each cycle varies with glucose level: near correction range, use 20% (similar to Temp Basal). Gradually increase to a maximum of 80% at high glucose (200 mg/dL, 11.1 mmol/L).", comment: "Description string for Modify Bolus Percentage toggle")
+                        .font(.footnote)
+                        .foregroundColor(.secondary)
+                        .fixedSize(horizontal: false, vertical: true)
+                        .multilineTextAlignment(.leading)
+                }
+                .fixedSize(horizontal: false, vertical: true)
+            }
+            .disabled(!automaticDosingStrategy.isAutomaticBolus)
+        )
+    }
+}
+
 extension AutomaticDosingStrategy {
     var informationalText: String {
         switch self {
         case .tempBasalOnly:
             return NSLocalizedString("Loop will set temporary basal rates to increase and decrease insulin delivery.", comment: "Description string for temp basal only dosing strategy")
         case .automaticBolus:
-            return NSLocalizedString("Loop will automatically bolus when insulin needs are above scheduled basal, and will use temporary basal rates when needed to reduce insulin delivery below scheduled basal.", comment: "Description string for automatic bolus dosing strategy")
+            return NSLocalizedString("Loop will automatically bolus 40% of recommended bolus when insulin needs are above scheduled basal, and will use temporary basal rates when needed to reduce insulin delivery below scheduled basal.", comment: "Description string for automatic bolus dosing strategy")
         }
     }
 
+    var isAutomaticBolus: Bool {
+        return self == .automaticBolus
+    }
 }
 
 struct DosingStrategySelectionView_Previews: PreviewProvider {
     static var previews: some View {
-        DosingStrategySelectionView(automaticDosingStrategy: .constant(.automaticBolus))
+        DosingStrategySelectionView(automaticDosingStrategy: .constant(.automaticBolus), applyLinearRampToBolusApplicationFactor: .constant(false))
     }
 }
diff --git a/Loop/Loop/Views/SettingsView.swift b/Loop/Loop/Views/SettingsView.swift
index dc3f6ec3..7c9b217e 100644
--- a/Loop/Loop/Views/SettingsView.swift
+++ b/Loop/Loop/Views/SettingsView.swift
@@ -165,7 +165,7 @@ extension SettingsView {
     private var dosingStrategySection: some View {
         Section(header: SectionHeader(label: NSLocalizedString("Dosing Strategy", comment: "The title of the Dosing Strategy section in settings"))) {
             
-            NavigationLink(destination: DosingStrategySelectionView(automaticDosingStrategy: $viewModel.automaticDosingStrategy))
+            NavigationLink(destination: DosingStrategySelectionView(automaticDosingStrategy: $viewModel.automaticDosingStrategy, applyLinearRampToBolusApplicationFactor: $viewModel.applyLinearRampToBolusApplicationFactor))
             {
                 HStack {
                     Text(viewModel.automaticDosingStrategy.title)
diff --git a/Loop/LoopCore/LoopSettings.swift b/Loop/LoopCore/LoopSettings.swift
index 63418ad4..9dbbfcca 100644
--- a/Loop/LoopCore/LoopSettings.swift
+++ b/Loop/LoopCore/LoopSettings.swift
@@ -73,6 +73,8 @@ public struct LoopSettings: Equatable {
     
     public var automaticDosingStrategy: AutomaticDosingStrategy = .tempBasalOnly
 
+    public var applyLinearRampToBolusApplicationFactor: Bool = false
+
     public var defaultRapidActingModel: ExponentialInsulinModelPreset?
 
     public var glucoseUnit: HKUnit? {
@@ -94,6 +96,7 @@ public struct LoopSettings: Equatable {
         maximumBolus: Double? = nil,
         suspendThreshold: GlucoseThreshold? = nil,
         automaticDosingStrategy: AutomaticDosingStrategy = .tempBasalOnly,
+        applyLinearRampToBolusApplicationFactor: Bool = false,
         defaultRapidActingModel: ExponentialInsulinModelPreset? = nil
     ) {
         self.dosingEnabled = dosingEnabled
@@ -110,6 +113,7 @@ public struct LoopSettings: Equatable {
         self.maximumBolus = maximumBolus
         self.suspendThreshold = suspendThreshold
         self.automaticDosingStrategy = automaticDosingStrategy
+        self.applyLinearRampToBolusApplicationFactor = applyLinearRampToBolusApplicationFactor
         self.defaultRapidActingModel = defaultRapidActingModel
     }
 }
@@ -277,13 +281,18 @@ extension LoopSettings: RawRepresentable {
         {
             self.automaticDosingStrategy = automaticDosingStrategy
         }
+
+        if let applyLinearRampToBolusApplicationFactor = rawValue["applyLinearRampToBolusApplicationFactor"] as? Bool {
+            self.applyLinearRampToBolusApplicationFactor = applyLinearRampToBolusApplicationFactor
+        }
     }
 
     public var rawValue: RawValue {
         var raw: RawValue = [
             "version": LoopSettings.version,
             "dosingEnabled": dosingEnabled,
-            "overridePresets": overridePresets.map { $0.rawValue }
+            "overridePresets": overridePresets.map { $0.rawValue },
+            "applyLinearRampToBolusApplicationFactor": applyLinearRampToBolusApplicationFactor
         ]
 
         raw["glucoseTargetRangeSchedule"] = glucoseTargetRangeSchedule?.rawValue
Submodule LoopKit contains modified content
diff --git a/LoopKit/LoopKit/SettingsStore.swift b/LoopKit/LoopKit/SettingsStore.swift
index b424cb93..b758d8cc 100644
--- a/LoopKit/LoopKit/SettingsStore.swift
+++ b/LoopKit/LoopKit/SettingsStore.swift
@@ -273,6 +273,7 @@ public struct StoredSettings: Equatable {
     // This is the user's display preference glucose unit. TODO: Rename?
     public let bloodGlucoseUnit: HKUnit?
     public let automaticDosingStrategy: AutomaticDosingStrategy
+    public let applyLinearRampToBolusApplicationFactor: Bool
     public let syncIdentifier: UUID
 
     public init(date: Date = Date(),
@@ -299,6 +300,7 @@ public struct StoredSettings: Equatable {
                 pumpDevice: HKDevice? = nil,
                 bloodGlucoseUnit: HKUnit? = nil,
                 automaticDosingStrategy: AutomaticDosingStrategy = .tempBasalOnly,
+                applyLinearRampToBolusApplicationFactor: Bool = false,
                 syncIdentifier: UUID = UUID()) {
         self.date = date
         self.controllerTimeZone = controllerTimeZone
@@ -324,6 +326,7 @@ public struct StoredSettings: Equatable {
         self.pumpDevice = pumpDevice
         self.bloodGlucoseUnit = bloodGlucoseUnit
         self.automaticDosingStrategy = automaticDosingStrategy
+        self.applyLinearRampToBolusApplicationFactor = applyLinearRampToBolusApplicationFactor
         self.syncIdentifier = syncIdentifier
     }
 }
@@ -358,6 +361,7 @@ extension StoredSettings: Codable {
                   pumpDevice: try container.decodeIfPresent(CodableDevice.self, forKey: .pumpDevice)?.device,
                   bloodGlucoseUnit: bloodGlucoseUnit,
                   automaticDosingStrategy: try container.decodeIfPresent(AutomaticDosingStrategy.self, forKey: .automaticDosingStrategy) ?? .tempBasalOnly,
+                  applyLinearRampToBolusApplicationFactor: try container.decodeIfPresent(Bool.self, forKey: .applyLinearRampToBolusApplicationFactor) ?? false,
                   syncIdentifier: try container.decode(UUID.self, forKey: .syncIdentifier))
     }
 
@@ -388,6 +392,7 @@ extension StoredSettings: Codable {
         try container.encodeIfPresent(pumpDevice.map { CodableDevice($0) }, forKey: .pumpDevice)
         try container.encode(bloodGlucoseUnit.unitString, forKey: .bloodGlucoseUnit)
         try container.encode(automaticDosingStrategy, forKey: .automaticDosingStrategy)
+        try container.encode(applyLinearRampToBolusApplicationFactor, forKey: .applyLinearRampToBolusApplicationFactor)
         try container.encode(syncIdentifier, forKey: .syncIdentifier)
     }
 
@@ -432,6 +437,7 @@ extension StoredSettings: Codable {
         case pumpDevice
         case bloodGlucoseUnit
         case automaticDosingStrategy
+        case applyLinearRampToBolusApplicationFactor
         case syncIdentifier
     }
 }
diff --git a/LoopKit/LoopKitUI/Views/CheckmarkListItem.swift b/LoopKit/LoopKitUI/Views/CheckmarkListItem.swift
index 2c8b71fe..f4aa8775 100644
--- a/LoopKit/LoopKitUI/Views/CheckmarkListItem.swift
+++ b/LoopKit/LoopKitUI/Views/CheckmarkListItem.swift
@@ -15,13 +15,15 @@ public struct CheckmarkListItem: View {
     var description: Text
     @Binding var isSelected: Bool
     let isEnabled: Bool
+    var trailingView: AnyView? = nil
 
-    public init(title: Text, titleFont: Font = .headline, description: Text, isSelected: Binding<Bool>, isEnabled: Bool = true) {
+    public init(title: Text, titleFont: Font = .headline, description: Text, isSelected: Binding<Bool>, isEnabled: Bool = true, trailingView: AnyView? = nil) {
         self.title = title
         self.titleFont = titleFont
         self.description = description
         self._isSelected = isSelected
         self.isEnabled = isEnabled
+        self.trailingView = trailingView
     }
 
     @ViewBuilder
@@ -36,23 +38,29 @@ public struct CheckmarkListItem: View {
     }
     
     private var content: some View {
-        HStack(spacing: 0) {
-            VStack(alignment: .leading, spacing: 4) {
-                title
-                    .font(titleFont)
-                description
-                    .font(.footnote)
-                    .foregroundColor(.secondary)
-                    .fixedSize(horizontal: false, vertical: true)
-                    .multilineTextAlignment(.leading)
-            }
+        VStack(alignment: .leading) {
+            HStack(spacing: 0) {
+                VStack(alignment: .leading, spacing: 4) {
+                    title
+                        .font(titleFont)
+                    description
+                        .font(.footnote)
+                        .foregroundColor(.secondary)
+                        .fixedSize(horizontal: false, vertical: true)
+                        .multilineTextAlignment(.leading)
+                }
 
-            Spacer(minLength: 12)
+                Spacer(minLength: 12)
 
-            selectionIndicator
-                .accessibility(label: Text(isSelected ? "Selected" : "Unselected"))
+                selectionIndicator
+                    .accessibility(label: Text(isSelected ? "Selected" : "Unselected"))
+            }
+            .animation(nil)
+            if let trailingView = trailingView {
+                trailingView
+                    .padding(.top, 4)
+            }
         }
-        .animation(nil)
     }
 
     @ViewBuilder
